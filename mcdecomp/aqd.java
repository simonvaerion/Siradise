/*
 * Decompiled with CFR 0.152.
 * 
 * Could not load the following classes:
 *  com.google.common.collect.ImmutableMap
 *  com.google.common.util.concurrent.ThreadFactoryBuilder
 *  com.mojang.datafixers.DSL
 *  com.mojang.datafixers.DSL$TypeReference
 *  com.mojang.datafixers.DataFix
 *  com.mojang.datafixers.DataFixer
 *  com.mojang.datafixers.DataFixerBuilder
 *  com.mojang.datafixers.Typed
 *  com.mojang.datafixers.schemas.Schema
 *  it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap
 */
import com.google.common.collect.ImmutableMap;
import com.google.common.util.concurrent.ThreadFactoryBuilder;
import com.mojang.datafixers.DSL;
import com.mojang.datafixers.DataFix;
import com.mojang.datafixers.DataFixer;
import com.mojang.datafixers.DataFixerBuilder;
import com.mojang.datafixers.Typed;
import com.mojang.datafixers.schemas.Schema;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class aqd {
    private static final BiFunction<Integer, Schema, Schema> b = Schema::new;
    private static final BiFunction<Integer, Schema, Schema> c = axd::new;
    private static final DataFixer d = aqd.a(aa.aT);
    public static final int a = 3441;

    private aqd() {
    }

    public static DataFixer a() {
        return d;
    }

    private static synchronized DataFixer a(Set<DSL.TypeReference> $$0) {
        DataFixerBuilder $$1 = new DataFixerBuilder(aa.b().d().c());
        aqd.a($$1);
        if ($$0.isEmpty()) {
            return $$1.buildUnoptimized();
        }
        ExecutorService $$2 = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("Datafixer Bootstrap").setDaemon(true).setPriority(1).build());
        return $$1.buildOptimized($$0, (Executor)$$2);
    }

    private static void a(DataFixerBuilder $$02) {
        $$02.addSchema(99, azx::new);
        Schema $$12 = $$02.addSchema(100, axe::new);
        $$02.addFixer((DataFix)new ask($$12, true));
        Schema $$2 = $$02.addSchema(101, b);
        $$02.addFixer((DataFix)new arb($$2, false));
        Schema $$3 = $$02.addSchema(102, axf::new);
        $$02.addFixer((DataFix)new aty($$3, true));
        $$02.addFixer((DataFix)new aua($$3, false));
        Schema $$4 = $$02.addSchema(105, b);
        $$02.addFixer((DataFix)new aue($$4, true));
        Schema $$5 = $$02.addSchema(106, axh::new);
        $$02.addFixer((DataFix)new auy($$5, true));
        Schema $$6 = $$02.addSchema(107, axi::new);
        $$02.addFixer((DataFix)new asr($$6, true));
        Schema $$7 = $$02.addSchema(108, b);
        $$02.addFixer((DataFix)new ate($$7, true));
        Schema $$8 = $$02.addSchema(109, b);
        $$02.addFixer((DataFix)new asm($$8, true));
        Schema $$9 = $$02.addSchema(110, b);
        $$02.addFixer((DataFix)new asn($$9, true));
        Schema $$10 = $$02.addSchema(111, b);
        $$02.addFixer((DataFix)new ast($$10, true));
        Schema $$11 = $$02.addSchema(113, b);
        $$02.addFixer((DataFix)new asy($$11, true));
        Schema $$122 = $$02.addSchema(135, axk::new);
        $$02.addFixer((DataFix)new ata($$122, true));
        Schema $$13 = $$02.addSchema(143, axl::new);
        $$02.addFixer((DataFix)new atg($$13, true));
        Schema $$14 = $$02.addSchema(147, b);
        $$02.addFixer((DataFix)new asd($$14, true));
        Schema $$15 = $$02.addSchema(165, b);
        $$02.addFixer((DataFix)new aum($$15, true));
        Schema $$16 = $$02.addSchema(501, azp::new);
        $$02.addFixer((DataFix)new aqj($$16, "Add 1.10 entities fix", avw.q));
        Schema $$17 = $$02.addSchema(502, b);
        $$02.addFixer(auc.a($$17, "cooked_fished item renamer", (String $$0) -> Objects.equals(axd.a($$0), "minecraft:cooked_fished") ? "minecraft:cooked_fish" : $$0));
        $$02.addFixer((DataFix)new atl($$17, false));
        Schema $$18 = $$02.addSchema(505, b);
        $$02.addFixer((DataFix)new avj($$18, false));
        Schema $$19 = $$02.addSchema(700, azq::new);
        $$02.addFixer((DataFix)new asj($$19, true));
        Schema $$20 = $$02.addSchema(701, azr::new);
        $$02.addFixer((DataFix)new atd($$20, true));
        Schema $$21 = $$02.addSchema(702, azs::new);
        $$02.addFixer((DataFix)new atk($$21, true));
        Schema $$22 = $$02.addSchema(703, azt::new);
        $$02.addFixer((DataFix)new aso($$22, true));
        Schema $$23 = $$02.addSchema(704, azu::new);
        $$02.addFixer((DataFix)new aqv($$23, true));
        Schema $$24 = $$02.addSchema(705, azv::new);
        $$02.addFixer((DataFix)new asp($$24, true));
        Schema $$25 = $$02.addSchema(804, c);
        $$02.addFixer((DataFix)new atw($$25, true));
        Schema $$26 = $$02.addSchema(806, c);
        $$02.addFixer((DataFix)new aul($$26, false));
        Schema $$27 = $$02.addSchema(808, azw::new);
        $$02.addFixer((DataFix)new aqj($$27, "added shulker box", avw.l));
        Schema $$28 = $$02.addSchema(808, 1, c);
        $$02.addFixer((DataFix)new atb($$28, false));
        Schema $$29 = $$02.addSchema(813, c);
        $$02.addFixer((DataFix)new aud($$29, false));
        $$02.addFixer((DataFix)new aqz($$29, false));
        Schema $$30 = $$02.addSchema(816, c);
        $$02.addFixer((DataFix)new avm($$30, false));
        Schema $$31 = $$02.addSchema(820, c);
        $$02.addFixer(auc.a($$31, "totem item renamer", aqd.a("minecraft:totem", "minecraft:totem_of_undying")));
        Schema $$32 = $$02.addSchema(1022, axg::new);
        $$02.addFixer((DataFix)new awz($$32, "added shoulder entities to players", avw.b));
        Schema $$33 = $$02.addSchema(1125, axj::new);
        $$02.addFixer((DataFix)new arl($$33, true));
        $$02.addFixer((DataFix)new aqn($$33, false));
        Schema $$34 = $$02.addSchema(1344, c);
        $$02.addFixer((DataFix)new avk($$34, false));
        Schema $$35 = $$02.addSchema(1446, c);
        $$02.addFixer((DataFix)new avl($$35, false));
        Schema $$36 = $$02.addSchema(1450, c);
        $$02.addFixer((DataFix)new arh($$36, false));
        Schema $$37 = $$02.addSchema(1451, axm::new);
        $$02.addFixer((DataFix)new aqj($$37, "AddTrappedChestFix", avw.l));
        Schema $$38 = $$02.addSchema(1451, 1, axn::new);
        $$02.addFixer((DataFix)new arr($$38, true));
        Schema $$39 = $$02.addSchema(1451, 2, axo::new);
        $$02.addFixer((DataFix)new aqt($$39, true));
        Schema $$40 = $$02.addSchema(1451, 3, axp::new);
        $$02.addFixer((DataFix)new ase($$40, true));
        $$02.addFixer((DataFix)new aug($$40, false));
        Schema $$41 = $$02.addSchema(1451, 4, axq::new);
        $$02.addFixer((DataFix)new ard($$41, true));
        $$02.addFixer((DataFix)new auj($$41, false));
        Schema $$42 = $$02.addSchema(1451, 5, axr::new);
        $$02.addFixer((DataFix)new aub($$42, false, Set.of("minecraft:note_block", "minecraft:flower_pot", "minecraft:dandelion", "minecraft:poppy", "minecraft:blue_orchid", "minecraft:allium", "minecraft:azure_bluet", "minecraft:red_tulip", "minecraft:orange_tulip", "minecraft:white_tulip", "minecraft:pink_tulip", "minecraft:oxeye_daisy", "minecraft:cactus", "minecraft:brown_mushroom", "minecraft:red_mushroom", "minecraft:oak_sapling", "minecraft:spruce_sapling", "minecraft:birch_sapling", "minecraft:jungle_sapling", "minecraft:acacia_sapling", "minecraft:dark_oak_sapling", "minecraft:dead_bush", "minecraft:fern")));
        $$02.addFixer((DataFix)new aqj($$42, "RemoveNoteBlockFlowerPotFix", avw.l));
        $$02.addFixer((DataFix)new auh($$42, false, "minecraft:spawn_egg"));
        $$02.addFixer((DataFix)new atj($$42, false));
        $$02.addFixer((DataFix)new aqs($$42, false));
        $$02.addFixer((DataFix)new aus($$42, false));
        Schema $$43 = $$02.addSchema(1451, 6, axs::new);
        $$02.addFixer((DataFix)new awh($$43, true));
        $$02.addFixer((DataFix)new awz($$43, "Rewrite objectives", avw.w));
        $$02.addFixer((DataFix)new aqw($$43, false));
        Schema $$44 = $$02.addSchema(1451, 7, c);
        $$02.addFixer((DataFix)new awt($$44, false));
        Schema $$45 = $$02.addSchema(1456, c);
        $$02.addFixer((DataFix)new asq($$45, false));
        Schema $$46 = $$02.addSchema(1458, c);
        $$02.addFixer((DataFix)new asi($$46, false));
        $$02.addFixer((DataFix)new atx($$46, false));
        $$02.addFixer((DataFix)new aqu($$46, false));
        Schema $$47 = $$02.addSchema(1460, axt::new);
        $$02.addFixer((DataFix)new asu($$47, false));
        Schema $$48 = $$02.addSchema(1466, axu::new);
        $$02.addFixer((DataFix)new arx($$48, true));
        Schema $$49 = $$02.addSchema(1470, axv::new);
        $$02.addFixer((DataFix)new aqj($$49, "Add 1.13 entities fix", avw.q));
        Schema $$50 = $$02.addSchema(1474, c);
        $$02.addFixer((DataFix)new ary($$50, false));
        $$02.addFixer(are.a($$50, "Colorless shulker block fixer", (String $$0) -> Objects.equals(axd.a($$0), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : $$0));
        $$02.addFixer(auc.a($$50, "Colorless shulker item fixer", (String $$0) -> Objects.equals(axd.a($$0), "minecraft:purple_shulker_box") ? "minecraft:shulker_box" : $$0));
        Schema $$51 = $$02.addSchema(1475, c);
        $$02.addFixer(are.a($$51, "Flowing fixer", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:flowing_water", (Object)"minecraft:water", (Object)"minecraft:flowing_lava", (Object)"minecraft:lava"))));
        Schema $$52 = $$02.addSchema(1480, c);
        $$02.addFixer(are.a($$52, "Rename coral blocks", aqd.a(awa.a)));
        $$02.addFixer(auc.a($$52, "Rename coral items", aqd.a(awa.a)));
        Schema $$53 = $$02.addSchema(1481, axw::new);
        $$02.addFixer((DataFix)new aqj($$53, "Add conduit", avw.l));
        Schema $$54 = $$02.addSchema(1483, axx::new);
        $$02.addFixer((DataFix)new asw($$54, true));
        $$02.addFixer(auc.a($$54, "Rename pufferfish egg item", aqd.a(asw.a)));
        Schema $$55 = $$02.addSchema(1484, c);
        $$02.addFixer(auc.a($$55, "Rename seagrass items", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:sea_grass", (Object)"minecraft:seagrass", (Object)"minecraft:tall_sea_grass", (Object)"minecraft:tall_seagrass"))));
        $$02.addFixer(are.a($$55, "Rename seagrass blocks", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:sea_grass", (Object)"minecraft:seagrass", (Object)"minecraft:tall_sea_grass", (Object)"minecraft:tall_seagrass"))));
        $$02.addFixer((DataFix)new atu($$55, false));
        Schema $$56 = $$02.addSchema(1486, axy::new);
        $$02.addFixer((DataFix)new ash($$56, true));
        $$02.addFixer(auc.a($$56, "Rename cod/salmon egg items", aqd.a(ash.b)));
        Schema $$57 = $$02.addSchema(1487, c);
        $$02.addFixer(auc.a($$57, "Rename prismarine_brick(s)_* blocks", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:prismarine_bricks_slab", (Object)"minecraft:prismarine_brick_slab", (Object)"minecraft:prismarine_bricks_stairs", (Object)"minecraft:prismarine_brick_stairs"))));
        $$02.addFixer(are.a($$57, "Rename prismarine_brick(s)_* items", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:prismarine_bricks_slab", (Object)"minecraft:prismarine_brick_slab", (Object)"minecraft:prismarine_bricks_stairs", (Object)"minecraft:prismarine_brick_stairs"))));
        Schema $$58 = $$02.addSchema(1488, c);
        $$02.addFixer(are.a($$58, "Rename kelp/kelptop", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:kelp_top", (Object)"minecraft:kelp", (Object)"minecraft:kelp", (Object)"minecraft:kelp_plant"))));
        $$02.addFixer(auc.a($$58, "Rename kelptop", aqd.a("minecraft:kelp_top", "minecraft:kelp")));
        $$02.addFixer((DataFix)new auz($$58, false, "Command block block entity custom name fix", avw.l, "minecraft:command_block"){

            @Override
            protected Typed<?> a(Typed<?> $$0) {
                return $$0.update(DSL.remainderFinder(), asi::a);
            }
        });
        $$02.addFixer((DataFix)new auz($$58, false, "Command block minecart custom name fix", avw.q, "minecraft:commandblock_minecart"){

            @Override
            protected Typed<?> a(Typed<?> $$0) {
                return $$0.update(DSL.remainderFinder(), asi::a);
            }
        });
        $$02.addFixer((DataFix)new atv($$58, false));
        Schema $$59 = $$02.addSchema(1490, c);
        $$02.addFixer(are.a($$59, "Rename melon_block", aqd.a("minecraft:melon_block", "minecraft:melon")));
        $$02.addFixer(auc.a($$59, "Rename melon_block/melon/speckled_melon", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:melon_block", (Object)"minecraft:melon", (Object)"minecraft:melon", (Object)"minecraft:melon_slice", (Object)"minecraft:speckled_melon", (Object)"minecraft:glistering_melon_slice"))));
        Schema $$60 = $$02.addSchema(1492, c);
        $$02.addFixer((DataFix)new arw($$60, false));
        Schema $$61 = $$02.addSchema(1494, c);
        $$02.addFixer((DataFix)new auf($$61, false));
        Schema $$62 = $$02.addSchema(1496, c);
        $$02.addFixer((DataFix)new aup($$62, false));
        Schema $$63 = $$02.addSchema(1500, c);
        $$02.addFixer((DataFix)new aqx($$63, false));
        Schema $$64 = $$02.addSchema(1501, c);
        $$02.addFixer((DataFix)new aqk($$64, false));
        Schema $$65 = $$02.addSchema(1502, c);
        $$02.addFixer((DataFix)new ava($$65, "Recipes fix", avw.y, aqd.a(avt.a)));
        Schema $$66 = $$02.addSchema(1506, c);
        $$02.addFixer((DataFix)new aur($$66, false));
        Schema $$67 = $$02.addSchema(1510, axz::new);
        $$02.addFixer(are.a($$67, "Block renamening fix", aqd.a(atf.b)));
        $$02.addFixer(auc.a($$67, "Item renamening fix", aqd.a(atf.c)));
        $$02.addFixer((DataFix)new ava($$67, "Recipes renamening fix", avw.y, aqd.a(avu.a)));
        $$02.addFixer((DataFix)new atf($$67, true));
        $$02.addFixer((DataFix)new awi($$67, "SwimStatsRenameFix", (Map<String, String>)ImmutableMap.of((Object)"minecraft:swim_one_cm", (Object)"minecraft:walk_on_water_one_cm", (Object)"minecraft:dive_one_cm", (Object)"minecraft:walk_under_water_one_cm")));
        Schema $$68 = $$02.addSchema(1514, c);
        $$02.addFixer((DataFix)new avc($$68, false));
        $$02.addFixer((DataFix)new awn($$68, false));
        $$02.addFixer((DataFix)new avd($$68, false));
        Schema $$69 = $$02.addSchema(1515, c);
        $$02.addFixer(are.a($$69, "Rename coral fan blocks", aqd.a(avz.a)));
        Schema $$70 = $$02.addSchema(1624, c);
        $$02.addFixer((DataFix)new awo($$70, false));
        Schema $$71 = $$02.addSchema(1800, aya::new);
        $$02.addFixer((DataFix)new aqj($$71, "Added 1.14 mobs fix", avw.q));
        $$02.addFixer(auc.a($$71, "Rename dye items", aqd.a(asb.a)));
        Schema $$72 = $$02.addSchema(1801, ayb::new);
        $$02.addFixer((DataFix)new aqj($$72, "Added Illager Beast", avw.q));
        Schema $$73 = $$02.addSchema(1802, c);
        $$02.addFixer(are.a($$73, "Rename sign blocks & stone slabs", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:stone_slab", (Object)"minecraft:smooth_stone_slab", (Object)"minecraft:sign", (Object)"minecraft:oak_sign", (Object)"minecraft:wall_sign", (Object)"minecraft:oak_wall_sign"))));
        $$02.addFixer(auc.a($$73, "Rename sign item & stone slabs", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:stone_slab", (Object)"minecraft:smooth_stone_slab", (Object)"minecraft:sign", (Object)"minecraft:oak_sign"))));
        Schema $$74 = $$02.addSchema(1803, c);
        $$02.addFixer((DataFix)new atz($$74, false));
        Schema $$75 = $$02.addSchema(1904, ayc::new);
        $$02.addFixer((DataFix)new aqj($$75, "Added Cats", avw.q));
        $$02.addFixer((DataFix)new asg($$75, false));
        Schema $$76 = $$02.addSchema(1905, c);
        $$02.addFixer((DataFix)new aru($$76, false));
        Schema $$77 = $$02.addSchema(1906, ayd::new);
        $$02.addFixer((DataFix)new aqj($$77, "Add POI Blocks", avw.l));
        Schema $$78 = $$02.addSchema(1909, aye::new);
        $$02.addFixer((DataFix)new aqj($$78, "Add jigsaw", avw.l));
        Schema $$79 = $$02.addSchema(1911, c);
        $$02.addFixer((DataFix)new arv($$79, false));
        Schema $$80 = $$02.addSchema(1914, c);
        $$02.addFixer((DataFix)new awv($$80, false));
        Schema $$81 = $$02.addSchema(1917, c);
        $$02.addFixer((DataFix)new ari($$81, false));
        Schema $$82 = $$02.addSchema(1918, c);
        $$02.addFixer((DataFix)new awq($$82, "minecraft:villager"));
        $$02.addFixer((DataFix)new awq($$82, "minecraft:zombie_villager"));
        Schema $$83 = $$02.addSchema(1920, ayf::new);
        $$02.addFixer((DataFix)new avb($$83, false));
        $$02.addFixer((DataFix)new aqj($$83, "Add campfire", avw.l));
        Schema $$84 = $$02.addSchema(1925, c);
        $$02.addFixer((DataFix)new auu($$84, false));
        Schema $$85 = $$02.addSchema(1928, ayg::new);
        $$02.addFixer((DataFix)new asx($$85, true));
        $$02.addFixer(auc.a($$85, "Rename ravager egg item", aqd.a(asx.a)));
        Schema $$86 = $$02.addSchema(1929, ayh::new);
        $$02.addFixer((DataFix)new aqj($$86, "Add Wandering Trader and Trader Llama", avw.q));
        Schema $$87 = $$02.addSchema(1931, ayi::new);
        $$02.addFixer((DataFix)new aqj($$87, "Added Fox", avw.q));
        Schema $$88 = $$02.addSchema(1936, c);
        $$02.addFixer((DataFix)new avh($$88, false));
        Schema $$89 = $$02.addSchema(1946, c);
        $$02.addFixer((DataFix)new awb($$89, false));
        Schema $$90 = $$02.addSchema(1948, c);
        $$02.addFixer((DataFix)new avf($$90));
        Schema $$91 = $$02.addSchema(1953, c);
        $$02.addFixer((DataFix)new ave($$91, false));
        Schema $$92 = $$02.addSchema(1955, c);
        $$02.addFixer((DataFix)new aws($$92, false));
        $$02.addFixer((DataFix)new axa($$92, false));
        Schema $$93 = $$02.addSchema(1961, c);
        $$02.addFixer((DataFix)new arq($$93, false));
        Schema $$94 = $$02.addSchema(1963, c);
        $$02.addFixer((DataFix)new avy($$94, false));
        Schema $$95 = $$02.addSchema(2100, ayj::new);
        $$02.addFixer((DataFix)new aqj($$95, "Added Bee and Bee Stinger", avw.q));
        $$02.addFixer((DataFix)new aqj($$95, "Add beehive", avw.l));
        $$02.addFixer((DataFix)new ava($$95, "Rename sugar recipe", avw.y, aqd.a("minecraft:sugar", "sugar_from_sugar_cane")));
        $$02.addFixer((DataFix)new aql($$95, false, "Rename sugar recipe advancement", aqd.a("minecraft:recipes/misc/sugar", "minecraft:recipes/misc/sugar_from_sugar_cane")));
        Schema $$96 = $$02.addSchema(2202, c);
        $$02.addFixer((DataFix)new arm($$96, false));
        Schema $$97 = $$02.addSchema(2209, c);
        UnaryOperator<String> $$98 = aqd.a("minecraft:bee_hive", "minecraft:beehive");
        $$02.addFixer(auc.a($$97, "Rename bee_hive item to beehive", $$98));
        $$02.addFixer((DataFix)new avs($$97, "Rename bee_hive poi to beehive", $$98));
        $$02.addFixer(are.a($$97, "Rename bee_hive block to beehive", $$98));
        Schema $$99 = $$02.addSchema(2211, c);
        $$02.addFixer((DataFix)new awk($$99, false));
        Schema $$100 = $$02.addSchema(2218, c);
        $$02.addFixer((DataFix)new atq($$100, false));
        Schema $$101 = $$02.addSchema(2501, ayk::new);
        $$02.addFixer((DataFix)new atr($$101, true));
        Schema $$102 = $$02.addSchema(2502, ayl::new);
        $$02.addFixer((DataFix)new aqj($$102, "Added Hoglin", avw.q));
        Schema $$103 = $$02.addSchema(2503, c);
        $$02.addFixer((DataFix)new awu($$103, false));
        $$02.addFixer((DataFix)new aql($$103, false, "Composter category change", aqd.a("minecraft:recipes/misc/composter", "minecraft:recipes/decorations/composter")));
        Schema $$104 = $$02.addSchema(2505, aym::new);
        $$02.addFixer((DataFix)new aqj($$104, "Added Piglin", avw.q));
        $$02.addFixer((DataFix)new auv($$104, "minecraft:villager"));
        Schema $$105 = $$02.addSchema(2508, c);
        $$02.addFixer(auc.a($$105, "Renamed fungi items to fungus", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:warped_fungi", (Object)"minecraft:warped_fungus", (Object)"minecraft:crimson_fungi", (Object)"minecraft:crimson_fungus"))));
        $$02.addFixer(are.a($$105, "Renamed fungi blocks to fungus", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:warped_fungi", (Object)"minecraft:warped_fungus", (Object)"minecraft:crimson_fungi", (Object)"minecraft:crimson_fungus"))));
        Schema $$106 = $$02.addSchema(2509, ayn::new);
        $$02.addFixer((DataFix)new atm($$106));
        $$02.addFixer(auc.a($$106, "Rename zombie pigman egg item", aqd.a(atm.a)));
        Schema $$107 = $$02.addSchema(2511, c);
        $$02.addFixer((DataFix)new asv($$107));
        Schema $$108 = $$02.addSchema(2514, c);
        $$02.addFixer((DataFix)new ath($$108));
        $$02.addFixer((DataFix)new arc($$108));
        $$02.addFixer((DataFix)new avq($$108));
        $$02.addFixer((DataFix)new aut($$108));
        $$02.addFixer((DataFix)new awd($$108));
        $$02.addFixer((DataFix)new auk($$108));
        Schema $$109 = $$02.addSchema(2516, c);
        $$02.addFixer((DataFix)new att($$109, "minecraft:villager"));
        $$02.addFixer((DataFix)new att($$109, "minecraft:zombie_villager"));
        Schema $$110 = $$02.addSchema(2518, c);
        $$02.addFixer((DataFix)new aun($$110, false));
        $$02.addFixer((DataFix)new auo($$110, false));
        Schema $$111 = $$02.addSchema(2519, ayo::new);
        $$02.addFixer((DataFix)new aqj($$111, "Added Strider", avw.q));
        Schema $$112 = $$02.addSchema(2522, ayp::new);
        $$02.addFixer((DataFix)new aqj($$112, "Added Zoglin", avw.q));
        Schema $$113 = $$02.addSchema(2523, c);
        $$02.addFixer((DataFix)new aqm($$113));
        Schema $$114 = $$02.addSchema(2527, c);
        $$02.addFixer((DataFix)new aqp($$114));
        Schema $$115 = $$02.addSchema(2528, c);
        $$02.addFixer(auc.a($$115, "Rename soul fire torch and soul fire lantern", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:soul_fire_torch", (Object)"minecraft:soul_torch", (Object)"minecraft:soul_fire_lantern", (Object)"minecraft:soul_lantern"))));
        $$02.addFixer(are.a($$115, "Rename soul fire torch and soul fire lantern", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:soul_fire_torch", (Object)"minecraft:soul_torch", (Object)"minecraft:soul_fire_wall_torch", (Object)"minecraft:soul_wall_torch", (Object)"minecraft:soul_fire_lantern", (Object)"minecraft:soul_lantern"))));
        Schema $$116 = $$02.addSchema(2529, c);
        $$02.addFixer((DataFix)new awj($$116, false));
        Schema $$117 = $$02.addSchema(2531, c);
        $$02.addFixer((DataFix)new avv($$117));
        Schema $$118 = $$02.addSchema(2533, c);
        $$02.addFixer((DataFix)new awr($$118));
        Schema $$119 = $$02.addSchema(2535, c);
        $$02.addFixer((DataFix)new atc($$119));
        Schema $$120 = $$02.addSchema(2550, c);
        $$02.addFixer((DataFix)new awx($$120));
        Schema $$121 = $$02.addSchema(2551, ayq::new);
        $$02.addFixer((DataFix)new awz($$121, "add types to WorldGenData", avw.B));
        Schema $$1222 = $$02.addSchema(2552, c);
        $$02.addFixer((DataFix)new ava($$1222, "Nether biome rename", avw.z, aqd.a("minecraft:nether", "minecraft:nether_wastes")));
        Schema $$123 = $$02.addSchema(2553, c);
        $$02.addFixer((DataFix)new ava($$123, "Biomes fix", avw.z, aqd.a(aqo.a)));
        Schema $$124 = $$02.addSchema(2558, c);
        $$02.addFixer((DataFix)new auw($$124, false));
        $$02.addFixer((DataFix)new avo($$124, false, "Rename swapHands setting", "key_key.swapHands", "key_key.swapOffhand"));
        Schema $$125 = $$02.addSchema(2568, ayr::new);
        $$02.addFixer((DataFix)new aqj($$125, "Added Piglin Brute", avw.q));
        Schema $$126 = $$02.addSchema(2571, ays::new);
        $$02.addFixer((DataFix)new aqj($$126, "Added Goat", avw.q));
        Schema $$127 = $$02.addSchema(2679, c);
        $$02.addFixer((DataFix)new arj($$127, false));
        Schema $$128 = $$02.addSchema(2680, c);
        $$02.addFixer(auc.a($$128, "Renamed grass path item to dirt path", aqd.a("minecraft:grass_path", "minecraft:dirt_path")));
        $$02.addFixer(arf.b($$128, "Renamed grass path block to dirt path", aqd.a("minecraft:grass_path", "minecraft:dirt_path")));
        Schema $$129 = $$02.addSchema(2684, ayt::new);
        $$02.addFixer((DataFix)new aqj($$129, "Added Sculk Sensor", avw.l));
        Schema $$130 = $$02.addSchema(2686, ayu::new);
        $$02.addFixer((DataFix)new aqj($$130, "Added Axolotl", avw.q));
        Schema $$131 = $$02.addSchema(2688, ayv::new);
        $$02.addFixer((DataFix)new aqj($$131, "Added Glow Squid", avw.q));
        $$02.addFixer((DataFix)new aqj($$131, "Added Glow Item Frame", avw.q));
        Schema $$132 = $$02.addSchema(2690, c);
        ImmutableMap $$133 = ImmutableMap.builder().put((Object)"minecraft:weathered_copper_block", (Object)"minecraft:oxidized_copper_block").put((Object)"minecraft:semi_weathered_copper_block", (Object)"minecraft:weathered_copper_block").put((Object)"minecraft:lightly_weathered_copper_block", (Object)"minecraft:exposed_copper_block").put((Object)"minecraft:weathered_cut_copper", (Object)"minecraft:oxidized_cut_copper").put((Object)"minecraft:semi_weathered_cut_copper", (Object)"minecraft:weathered_cut_copper").put((Object)"minecraft:lightly_weathered_cut_copper", (Object)"minecraft:exposed_cut_copper").put((Object)"minecraft:weathered_cut_copper_stairs", (Object)"minecraft:oxidized_cut_copper_stairs").put((Object)"minecraft:semi_weathered_cut_copper_stairs", (Object)"minecraft:weathered_cut_copper_stairs").put((Object)"minecraft:lightly_weathered_cut_copper_stairs", (Object)"minecraft:exposed_cut_copper_stairs").put((Object)"minecraft:weathered_cut_copper_slab", (Object)"minecraft:oxidized_cut_copper_slab").put((Object)"minecraft:semi_weathered_cut_copper_slab", (Object)"minecraft:weathered_cut_copper_slab").put((Object)"minecraft:lightly_weathered_cut_copper_slab", (Object)"minecraft:exposed_cut_copper_slab").put((Object)"minecraft:waxed_semi_weathered_copper", (Object)"minecraft:waxed_weathered_copper").put((Object)"minecraft:waxed_lightly_weathered_copper", (Object)"minecraft:waxed_exposed_copper").put((Object)"minecraft:waxed_semi_weathered_cut_copper", (Object)"minecraft:waxed_weathered_cut_copper").put((Object)"minecraft:waxed_lightly_weathered_cut_copper", (Object)"minecraft:waxed_exposed_cut_copper").put((Object)"minecraft:waxed_semi_weathered_cut_copper_stairs", (Object)"minecraft:waxed_weathered_cut_copper_stairs").put((Object)"minecraft:waxed_lightly_weathered_cut_copper_stairs", (Object)"minecraft:waxed_exposed_cut_copper_stairs").put((Object)"minecraft:waxed_semi_weathered_cut_copper_slab", (Object)"minecraft:waxed_weathered_cut_copper_slab").put((Object)"minecraft:waxed_lightly_weathered_cut_copper_slab", (Object)"minecraft:waxed_exposed_cut_copper_slab").build();
        $$02.addFixer(auc.a($$132, "Renamed copper block items to new oxidized terms", aqd.a((Map<String, String>)$$133)));
        $$02.addFixer(arf.b($$132, "Renamed copper blocks to new oxidized terms", aqd.a((Map<String, String>)$$133)));
        Schema $$134 = $$02.addSchema(2691, c);
        ImmutableMap $$135 = ImmutableMap.builder().put((Object)"minecraft:waxed_copper", (Object)"minecraft:waxed_copper_block").put((Object)"minecraft:oxidized_copper_block", (Object)"minecraft:oxidized_copper").put((Object)"minecraft:weathered_copper_block", (Object)"minecraft:weathered_copper").put((Object)"minecraft:exposed_copper_block", (Object)"minecraft:exposed_copper").build();
        $$02.addFixer(auc.a($$134, "Rename copper item suffixes", aqd.a((Map<String, String>)$$135)));
        $$02.addFixer(arf.b($$134, "Rename copper blocks suffixes", aqd.a((Map<String, String>)$$135)));
        Schema $$136 = $$02.addSchema(2693, c);
        $$02.addFixer((DataFix)new aqi($$136, avw.B, "has_increased_height_already", false));
        Schema $$137 = $$02.addSchema(2696, c);
        ImmutableMap $$138 = ImmutableMap.builder().put((Object)"minecraft:grimstone", (Object)"minecraft:deepslate").put((Object)"minecraft:grimstone_slab", (Object)"minecraft:cobbled_deepslate_slab").put((Object)"minecraft:grimstone_stairs", (Object)"minecraft:cobbled_deepslate_stairs").put((Object)"minecraft:grimstone_wall", (Object)"minecraft:cobbled_deepslate_wall").put((Object)"minecraft:polished_grimstone", (Object)"minecraft:polished_deepslate").put((Object)"minecraft:polished_grimstone_slab", (Object)"minecraft:polished_deepslate_slab").put((Object)"minecraft:polished_grimstone_stairs", (Object)"minecraft:polished_deepslate_stairs").put((Object)"minecraft:polished_grimstone_wall", (Object)"minecraft:polished_deepslate_wall").put((Object)"minecraft:grimstone_tiles", (Object)"minecraft:deepslate_tiles").put((Object)"minecraft:grimstone_tile_slab", (Object)"minecraft:deepslate_tile_slab").put((Object)"minecraft:grimstone_tile_stairs", (Object)"minecraft:deepslate_tile_stairs").put((Object)"minecraft:grimstone_tile_wall", (Object)"minecraft:deepslate_tile_wall").put((Object)"minecraft:grimstone_bricks", (Object)"minecraft:deepslate_bricks").put((Object)"minecraft:grimstone_brick_slab", (Object)"minecraft:deepslate_brick_slab").put((Object)"minecraft:grimstone_brick_stairs", (Object)"minecraft:deepslate_brick_stairs").put((Object)"minecraft:grimstone_brick_wall", (Object)"minecraft:deepslate_brick_wall").put((Object)"minecraft:chiseled_grimstone", (Object)"minecraft:chiseled_deepslate").build();
        $$02.addFixer(auc.a($$137, "Renamed grimstone block items to deepslate", aqd.a((Map<String, String>)$$138)));
        $$02.addFixer(arf.b($$137, "Renamed grimstone blocks to deepslate", aqd.a((Map<String, String>)$$138)));
        Schema $$139 = $$02.addSchema(2700, c);
        $$02.addFixer(arf.b($$139, "Renamed cave vines blocks", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:cave_vines_head", (Object)"minecraft:cave_vines", (Object)"minecraft:cave_vines_body", (Object)"minecraft:cave_vines_plant"))));
        Schema $$140 = $$02.addSchema(2701, c);
        $$02.addFixer((DataFix)new awc($$140));
        Schema $$141 = $$02.addSchema(2702, c);
        $$02.addFixer((DataFix)new aqf($$141));
        Schema $$142 = $$02.addSchema(2704, ayw::new);
        $$02.addFixer((DataFix)new aqj($$142, "Added Goat", avw.q));
        Schema $$143 = $$02.addSchema(2707, ayx::new);
        $$02.addFixer((DataFix)new aqj($$143, "Added Marker", avw.q));
        $$02.addFixer((DataFix)new aqi($$143, avw.B, "has_increased_height_already", true));
        Schema $$144 = $$02.addSchema(2710, c);
        $$02.addFixer((DataFix)new awi($$144, "Renamed play_one_minute stat to play_time", (Map<String, String>)ImmutableMap.of((Object)"minecraft:play_one_minute", (Object)"minecraft:play_time")));
        Schema $$145 = $$02.addSchema(2717, c);
        $$02.addFixer(auc.a($$145, "Rename azalea_leaves_flowers", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:azalea_leaves_flowers", (Object)"minecraft:flowering_azalea_leaves"))));
        $$02.addFixer(are.a($$145, "Rename azalea_leaves_flowers items", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:azalea_leaves_flowers", (Object)"minecraft:flowering_azalea_leaves"))));
        Schema $$146 = $$02.addSchema(2825, c);
        $$02.addFixer((DataFix)new aqi($$146, avw.B, "has_increased_height_already", false));
        Schema $$147 = $$02.addSchema(2831, ayy::new);
        $$02.addFixer((DataFix)new awg($$147));
        Schema $$148 = $$02.addSchema(2832, ayz::new);
        $$02.addFixer((DataFix)new awy($$148));
        $$02.addFixer((DataFix)new arp($$148));
        Schema $$149 = $$02.addSchema(2833, c);
        $$02.addFixer((DataFix)new aww($$149));
        Schema $$150 = $$02.addSchema(2838, c);
        $$02.addFixer((DataFix)new ava($$150, "Caves and Cliffs biome renames", avw.z, aqd.a(ark.a)));
        Schema $$151 = $$02.addSchema(2841, c);
        $$02.addFixer((DataFix)new ars($$151));
        Schema $$152 = $$02.addSchema(2842, aza::new);
        $$02.addFixer((DataFix)new art($$152));
        Schema $$153 = $$02.addSchema(2843, c);
        $$02.addFixer((DataFix)new avp($$153));
        $$02.addFixer((DataFix)new ava($$153, "Remove Deep Warm Ocean", avw.z, aqd.a("minecraft:deep_warm_ocean", "minecraft:warm_ocean")));
        Schema $$154 = $$02.addSchema(2846, c);
        $$02.addFixer((DataFix)new aql($$154, false, "Rename some C&C part 2 advancements", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:husbandry/play_jukebox_in_meadows", (Object)"minecraft:adventure/play_jukebox_in_meadows", (Object)"minecraft:adventure/caves_and_cliff", (Object)"minecraft:adventure/fall_from_world_height", (Object)"minecraft:adventure/ride_strider_in_overworld_lava", (Object)"minecraft:nether/ride_strider_in_overworld_lava"))));
        Schema $$155 = $$02.addSchema(2852, c);
        $$02.addFixer((DataFix)new aww($$155));
        Schema $$156 = $$02.addSchema(2967, c);
        $$02.addFixer((DataFix)new awl($$156));
        Schema $$157 = $$02.addSchema(2970, c);
        $$02.addFixer((DataFix)new awm($$157));
        Schema $$158 = $$02.addSchema(3076, azb::new);
        $$02.addFixer((DataFix)new aqj($$158, "Added Sculk Catalyst", avw.l));
        Schema $$159 = $$02.addSchema(3077, c);
        $$02.addFixer((DataFix)new arn($$159));
        Schema $$160 = $$02.addSchema(3078, azc::new);
        $$02.addFixer((DataFix)new aqj($$160, "Added Frog", avw.q));
        $$02.addFixer((DataFix)new aqj($$160, "Added Tadpole", avw.q));
        $$02.addFixer((DataFix)new aqj($$160, "Added Sculk Shrieker", avw.l));
        Schema $$161 = $$02.addSchema(3081, azd::new);
        $$02.addFixer((DataFix)new aqj($$161, "Added Warden", avw.q));
        Schema $$162 = $$02.addSchema(3082, aze::new);
        $$02.addFixer((DataFix)new aqj($$162, "Added Chest Boat", avw.q));
        Schema $$163 = $$02.addSchema(3083, azf::new);
        $$02.addFixer((DataFix)new aqj($$163, "Added Allay", avw.q));
        Schema $$164 = $$02.addSchema(3084, c);
        $$02.addFixer((DataFix)new ava($$164, "game_event_renames_3084", avw.t, aqd.a((Map<String, String>)ImmutableMap.builder().put((Object)"minecraft:block_press", (Object)"minecraft:block_activate").put((Object)"minecraft:block_switch", (Object)"minecraft:block_activate").put((Object)"minecraft:block_unpress", (Object)"minecraft:block_deactivate").put((Object)"minecraft:block_unswitch", (Object)"minecraft:block_deactivate").put((Object)"minecraft:drinking_finish", (Object)"minecraft:drink").put((Object)"minecraft:elytra_free_fall", (Object)"minecraft:elytra_glide").put((Object)"minecraft:entity_damaged", (Object)"minecraft:entity_damage").put((Object)"minecraft:entity_dying", (Object)"minecraft:entity_die").put((Object)"minecraft:entity_killed", (Object)"minecraft:entity_die").put((Object)"minecraft:mob_interact", (Object)"minecraft:entity_interact").put((Object)"minecraft:ravager_roar", (Object)"minecraft:entity_roar").put((Object)"minecraft:ring_bell", (Object)"minecraft:block_change").put((Object)"minecraft:shulker_close", (Object)"minecraft:container_close").put((Object)"minecraft:shulker_open", (Object)"minecraft:container_open").put((Object)"minecraft:wolf_shaking", (Object)"minecraft:entity_shake").build())));
        Schema $$165 = $$02.addSchema(3086, c);
        $$02.addFixer((DataFix)new ati($$165, "Change cat variant type", avw.q, "minecraft:cat", "CatType", arg_0 -> ((Int2ObjectOpenHashMap)ac.a(new Int2ObjectOpenHashMap(), (T $$0) -> {
            $$0.defaultReturnValue((Object)"minecraft:tabby");
            $$0.put(0, (Object)"minecraft:tabby");
            $$0.put(1, (Object)"minecraft:black");
            $$0.put(2, (Object)"minecraft:red");
            $$0.put(3, (Object)"minecraft:siamese");
            $$0.put(4, (Object)"minecraft:british");
            $$0.put(5, (Object)"minecraft:calico");
            $$0.put(6, (Object)"minecraft:persian");
            $$0.put(7, (Object)"minecraft:ragdoll");
            $$0.put(8, (Object)"minecraft:white");
            $$0.put(9, (Object)"minecraft:jellie");
            $$0.put(10, (Object)"minecraft:all_black");
        })).get(arg_0)));
        ImmutableMap $$166 = ImmutableMap.builder().put((Object)"textures/entity/cat/tabby.png", (Object)"minecraft:tabby").put((Object)"textures/entity/cat/black.png", (Object)"minecraft:black").put((Object)"textures/entity/cat/red.png", (Object)"minecraft:red").put((Object)"textures/entity/cat/siamese.png", (Object)"minecraft:siamese").put((Object)"textures/entity/cat/british_shorthair.png", (Object)"minecraft:british").put((Object)"textures/entity/cat/calico.png", (Object)"minecraft:calico").put((Object)"textures/entity/cat/persian.png", (Object)"minecraft:persian").put((Object)"textures/entity/cat/ragdoll.png", (Object)"minecraft:ragdoll").put((Object)"textures/entity/cat/white.png", (Object)"minecraft:white").put((Object)"textures/entity/cat/jellie.png", (Object)"minecraft:jellie").put((Object)"textures/entity/cat/all_black.png", (Object)"minecraft:all_black").build();
        $$02.addFixer((DataFix)new arz($$165, "Migrate cat variant advancement", "minecraft:husbandry/complete_catalogue", $$1 -> (String)$$166.getOrDefault($$1, $$1)));
        Schema $$167 = $$02.addSchema(3087, c);
        $$02.addFixer((DataFix)new ati($$167, "Change frog variant type", avw.q, "minecraft:frog", "Variant", arg_0 -> ((Int2ObjectOpenHashMap)ac.a(new Int2ObjectOpenHashMap(), (T $$0) -> {
            $$0.put(0, (Object)"minecraft:temperate");
            $$0.put(1, (Object)"minecraft:warm");
            $$0.put(2, (Object)"minecraft:cold");
        })).get(arg_0)));
        Schema $$168 = $$02.addSchema(3090, c);
        $$02.addFixer((DataFix)new ass($$168));
        Schema $$169 = $$02.addSchema(3093, c);
        $$02.addFixer((DataFix)new asl($$169));
        Schema $$170 = $$02.addSchema(3094, c);
        $$02.addFixer((DataFix)new ats($$170));
        Schema $$171 = $$02.addSchema(3097, c);
        $$02.addFixer((DataFix)new ato($$171));
        $$02.addFixer((DataFix)new atp($$171));
        Map<String, String> $$172 = Map.of("minecraft:british", "minecraft:british_shorthair");
        $$02.addFixer((DataFix)new awp($$171, "Rename british shorthair", avw.q, "minecraft:cat", $$172));
        $$02.addFixer((DataFix)new arz($$171, "Migrate cat variant advancement for british shorthair", "minecraft:husbandry/complete_catalogue", $$1 -> $$172.getOrDefault($$1, (String)$$1)));
        $$02.addFixer((DataFix)new avr($$171, "Remove unpopulated villager PoI types", Set.of("minecraft:unemployed", "minecraft:nitwit")::contains));
        Schema $$173 = $$02.addSchema(3108, c);
        $$02.addFixer((DataFix)new aqr($$173));
        Schema $$174 = $$02.addSchema(3201, c);
        $$02.addFixer((DataFix)new avn($$174));
        Schema $$175 = $$02.addSchema(3202, azg::new);
        $$02.addFixer((DataFix)new aqj($$175, "Added Hanging Sign", avw.l));
        Schema $$176 = $$02.addSchema(3203, azh::new);
        $$02.addFixer((DataFix)new aqj($$176, "Added Camel", avw.q));
        Schema $$177 = $$02.addSchema(3204, azi::new);
        $$02.addFixer((DataFix)new aqj($$177, "Added Chiseled Bookshelf", avw.l));
        Schema $$178 = $$02.addSchema(3209, c);
        $$02.addFixer((DataFix)new auh($$178, false, "minecraft:pig_spawn_egg"));
        Schema $$179 = $$02.addSchema(3214, c);
        $$02.addFixer((DataFix)new avi($$179));
        Schema $$180 = $$02.addSchema(3319, c);
        $$02.addFixer((DataFix)new avg($$180));
        Schema $$181 = $$02.addSchema(3322, c);
        $$02.addFixer((DataFix)new asc($$181));
        Schema $$182 = $$02.addSchema(3325, azj::new);
        $$02.addFixer((DataFix)new aqj($$182, "Added displays", avw.q));
        Schema $$183 = $$02.addSchema(3326, azk::new);
        $$02.addFixer((DataFix)new aqj($$183, "Added Sniffer", avw.q));
        Schema $$184 = $$02.addSchema(3327, azl::new);
        $$02.addFixer((DataFix)new aqj($$184, "Archaeology", avw.l));
        Schema $$185 = $$02.addSchema(3328, azm::new);
        $$02.addFixer((DataFix)new aqj($$185, "Added interaction", avw.q));
        Schema $$186 = $$02.addSchema(3438, azn::new);
        $$02.addFixer(aqy.a($$186, "Rename Suspicious Sand to Brushable Block", aqd.a("minecraft:suspicious_sand", "minecraft:brushable_block")));
        $$02.addFixer((DataFix)new asf($$186));
        $$02.addFixer(auc.a($$186, "Pottery shard renaming", aqd.a((Map<String, String>)ImmutableMap.of((Object)"minecraft:pottery_shard_archer", (Object)"minecraft:archer_pottery_shard", (Object)"minecraft:pottery_shard_prize", (Object)"minecraft:prize_pottery_shard", (Object)"minecraft:pottery_shard_arms_up", (Object)"minecraft:arms_up_pottery_shard", (Object)"minecraft:pottery_shard_skull", (Object)"minecraft:skull_pottery_shard"))));
        $$02.addFixer((DataFix)new aqj($$186, "Added calibrated sculk sensor", avw.l));
        Schema $$187 = $$02.addSchema(3439, c);
        $$02.addFixer((DataFix)new ara($$187, "Updated sign text format for Signs", "minecraft:sign"));
        $$02.addFixer((DataFix)new ara($$187, "Updated sign text format for Hanging Signs", "minecraft:hanging_sign"));
        Schema $$188 = $$02.addSchema(3440, c);
        $$02.addFixer((DataFix)new ava($$188, "Replace experimental 1.20 overworld", avw.A, aqd.a("minecraft:overworld_update_1_20", "minecraft:overworld")));
        $$02.addFixer((DataFix)new atn($$188, "Remove 1.20 feature toggle", Set.of("minecraft:update_1_20")));
        Schema $$189 = $$02.addSchema(3441, c);
        $$02.addFixer((DataFix)new aqq($$189));
        Schema $$190 = $$02.addSchema(3447, c);
        $$02.addFixer(auc.a($$190, "Pottery shard item renaming to Pottery sherd", aqd.a(Stream.of("minecraft:angler_pottery_shard", "minecraft:archer_pottery_shard", "minecraft:arms_up_pottery_shard", "minecraft:blade_pottery_shard", "minecraft:brewer_pottery_shard", "minecraft:burn_pottery_shard", "minecraft:danger_pottery_shard", "minecraft:explorer_pottery_shard", "minecraft:friend_pottery_shard", "minecraft:heart_pottery_shard", "minecraft:heartbreak_pottery_shard", "minecraft:howl_pottery_shard", "minecraft:miner_pottery_shard", "minecraft:mourner_pottery_shard", "minecraft:plenty_pottery_shard", "minecraft:prize_pottery_shard", "minecraft:sheaf_pottery_shard", "minecraft:shelter_pottery_shard", "minecraft:skull_pottery_shard", "minecraft:snort_pottery_shard").collect(Collectors.toMap(Function.identity(), $$0 -> $$0.replace("_pottery_shard", "_pottery_sherd"))))));
        Schema $$191 = $$02.addSchema(3448, azo::new);
        $$02.addFixer((DataFix)new asa($$191));
        Schema $$192 = $$02.addSchema(3450, c);
        $$02.addFixer((DataFix)new avx($$192, "Remove liquid_carvers and heightmap chunk statuses", aqd.a(Map.of("minecraft:liquid_carvers", "minecraft:carvers", "minecraft:heightmaps", "minecraft:spawn"))));
        Schema $$193 = $$02.addSchema(3451, c);
        $$02.addFixer((DataFix)new aro($$193));
        Schema $$194 = $$02.addSchema(3459, c);
        $$02.addFixer((DataFix)new auq($$194));
    }

    private static UnaryOperator<String> a(Map<String, String> $$0) {
        return $$1 -> $$0.getOrDefault($$1, (String)$$1);
    }

    private static UnaryOperator<String> a(String $$0, String $$1) {
        return $$2 -> Objects.equals($$2, $$0) ? $$1 : $$2;
    }
}

